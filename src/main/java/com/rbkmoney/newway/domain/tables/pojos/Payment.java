/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.newway.domain.tables.pojos;


import com.rbkmoney.newway.domain.enums.PayerType;
import com.rbkmoney.newway.domain.enums.PaymentFlowType;
import com.rbkmoney.newway.domain.enums.PaymentStatus;
import com.rbkmoney.newway.domain.enums.PaymentToolType;
import com.rbkmoney.newway.domain.enums.RiskScore;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payment implements Serializable {

    private static final long serialVersionUID = 16431172;

    private Long            id;
    private Long            eventId;
    private LocalDateTime   eventCreatedAt;
    private String          paymentId;
    private LocalDateTime   createdAt;
    private String          invoiceId;
    private String          partyId;
    private String          shopId;
    private Long            domainRevision;
    private Long            partyRevision;
    private PaymentStatus   status;
    private String          statusCancelledReason;
    private String          statusCapturedReason;
    private String          statusFailedFailure;
    private Long            amount;
    private String          currencyCode;
    private PayerType       payerType;
    private PaymentToolType payerPaymentToolType;
    private String          payerBankCardToken;
    private String          payerBankCardPaymentSystem;
    private String          payerBankCardBin;
    private String          payerBankCardMaskedPan;
    private String          payerBankCardTokenProvider;
    private String          payerPaymentTerminalType;
    private String          payerDigitalWalletProvider;
    private String          payerDigitalWalletId;
    private String          payerPaymentSessionId;
    private String          payerIpAddress;
    private String          payerFingerprint;
    private String          payerPhoneNumber;
    private String          payerEmail;
    private String          payerCustomerId;
    private String          payerCustomerBindingId;
    private String          payerCustomerRecPaymentToolId;
    private byte[]          context;
    private PaymentFlowType paymentFlowType;
    private String          paymentFlowOnHoldExpiration;
    private LocalDateTime   paymentFlowHeldUntil;
    private RiskScore       riskScore;
    private Integer         routeProviderId;
    private Integer         routeTerminalId;
    private LocalDateTime   wtime;
    private Boolean         current;
    private String          sessionPayloadTransactionBoundTrxId;
    private String          sessionPayloadTransactionBoundTrxExtraJson;
    private Long            fee;
    private Long            providerFee;
    private Long            externalFee;
    private Long            guaranteeDeposit;
    private Boolean         makeRecurrent;
    private String          payerRecurrentParentInvoiceId;
    private String          payerRecurrentParentPaymentId;
    private String          recurrentIntentionToken;

    public Payment() {}

    public Payment(Payment value) {
        this.id = value.id;
        this.eventId = value.eventId;
        this.eventCreatedAt = value.eventCreatedAt;
        this.paymentId = value.paymentId;
        this.createdAt = value.createdAt;
        this.invoiceId = value.invoiceId;
        this.partyId = value.partyId;
        this.shopId = value.shopId;
        this.domainRevision = value.domainRevision;
        this.partyRevision = value.partyRevision;
        this.status = value.status;
        this.statusCancelledReason = value.statusCancelledReason;
        this.statusCapturedReason = value.statusCapturedReason;
        this.statusFailedFailure = value.statusFailedFailure;
        this.amount = value.amount;
        this.currencyCode = value.currencyCode;
        this.payerType = value.payerType;
        this.payerPaymentToolType = value.payerPaymentToolType;
        this.payerBankCardToken = value.payerBankCardToken;
        this.payerBankCardPaymentSystem = value.payerBankCardPaymentSystem;
        this.payerBankCardBin = value.payerBankCardBin;
        this.payerBankCardMaskedPan = value.payerBankCardMaskedPan;
        this.payerBankCardTokenProvider = value.payerBankCardTokenProvider;
        this.payerPaymentTerminalType = value.payerPaymentTerminalType;
        this.payerDigitalWalletProvider = value.payerDigitalWalletProvider;
        this.payerDigitalWalletId = value.payerDigitalWalletId;
        this.payerPaymentSessionId = value.payerPaymentSessionId;
        this.payerIpAddress = value.payerIpAddress;
        this.payerFingerprint = value.payerFingerprint;
        this.payerPhoneNumber = value.payerPhoneNumber;
        this.payerEmail = value.payerEmail;
        this.payerCustomerId = value.payerCustomerId;
        this.payerCustomerBindingId = value.payerCustomerBindingId;
        this.payerCustomerRecPaymentToolId = value.payerCustomerRecPaymentToolId;
        this.context = value.context;
        this.paymentFlowType = value.paymentFlowType;
        this.paymentFlowOnHoldExpiration = value.paymentFlowOnHoldExpiration;
        this.paymentFlowHeldUntil = value.paymentFlowHeldUntil;
        this.riskScore = value.riskScore;
        this.routeProviderId = value.routeProviderId;
        this.routeTerminalId = value.routeTerminalId;
        this.wtime = value.wtime;
        this.current = value.current;
        this.sessionPayloadTransactionBoundTrxId = value.sessionPayloadTransactionBoundTrxId;
        this.sessionPayloadTransactionBoundTrxExtraJson = value.sessionPayloadTransactionBoundTrxExtraJson;
        this.fee = value.fee;
        this.providerFee = value.providerFee;
        this.externalFee = value.externalFee;
        this.guaranteeDeposit = value.guaranteeDeposit;
        this.makeRecurrent = value.makeRecurrent;
        this.payerRecurrentParentInvoiceId = value.payerRecurrentParentInvoiceId;
        this.payerRecurrentParentPaymentId = value.payerRecurrentParentPaymentId;
        this.recurrentIntentionToken = value.recurrentIntentionToken;
    }

    public Payment(
        Long            id,
        Long            eventId,
        LocalDateTime   eventCreatedAt,
        String          paymentId,
        LocalDateTime   createdAt,
        String          invoiceId,
        String          partyId,
        String          shopId,
        Long            domainRevision,
        Long            partyRevision,
        PaymentStatus   status,
        String          statusCancelledReason,
        String          statusCapturedReason,
        String          statusFailedFailure,
        Long            amount,
        String          currencyCode,
        PayerType       payerType,
        PaymentToolType payerPaymentToolType,
        String          payerBankCardToken,
        String          payerBankCardPaymentSystem,
        String          payerBankCardBin,
        String          payerBankCardMaskedPan,
        String          payerBankCardTokenProvider,
        String          payerPaymentTerminalType,
        String          payerDigitalWalletProvider,
        String          payerDigitalWalletId,
        String          payerPaymentSessionId,
        String          payerIpAddress,
        String          payerFingerprint,
        String          payerPhoneNumber,
        String          payerEmail,
        String          payerCustomerId,
        String          payerCustomerBindingId,
        String          payerCustomerRecPaymentToolId,
        byte[]          context,
        PaymentFlowType paymentFlowType,
        String          paymentFlowOnHoldExpiration,
        LocalDateTime   paymentFlowHeldUntil,
        RiskScore       riskScore,
        Integer         routeProviderId,
        Integer         routeTerminalId,
        LocalDateTime   wtime,
        Boolean         current,
        String          sessionPayloadTransactionBoundTrxId,
        String          sessionPayloadTransactionBoundTrxExtraJson,
        Long            fee,
        Long            providerFee,
        Long            externalFee,
        Long            guaranteeDeposit,
        Boolean         makeRecurrent,
        String          payerRecurrentParentInvoiceId,
        String          payerRecurrentParentPaymentId,
        String          recurrentIntentionToken
    ) {
        this.id = id;
        this.eventId = eventId;
        this.eventCreatedAt = eventCreatedAt;
        this.paymentId = paymentId;
        this.createdAt = createdAt;
        this.invoiceId = invoiceId;
        this.partyId = partyId;
        this.shopId = shopId;
        this.domainRevision = domainRevision;
        this.partyRevision = partyRevision;
        this.status = status;
        this.statusCancelledReason = statusCancelledReason;
        this.statusCapturedReason = statusCapturedReason;
        this.statusFailedFailure = statusFailedFailure;
        this.amount = amount;
        this.currencyCode = currencyCode;
        this.payerType = payerType;
        this.payerPaymentToolType = payerPaymentToolType;
        this.payerBankCardToken = payerBankCardToken;
        this.payerBankCardPaymentSystem = payerBankCardPaymentSystem;
        this.payerBankCardBin = payerBankCardBin;
        this.payerBankCardMaskedPan = payerBankCardMaskedPan;
        this.payerBankCardTokenProvider = payerBankCardTokenProvider;
        this.payerPaymentTerminalType = payerPaymentTerminalType;
        this.payerDigitalWalletProvider = payerDigitalWalletProvider;
        this.payerDigitalWalletId = payerDigitalWalletId;
        this.payerPaymentSessionId = payerPaymentSessionId;
        this.payerIpAddress = payerIpAddress;
        this.payerFingerprint = payerFingerprint;
        this.payerPhoneNumber = payerPhoneNumber;
        this.payerEmail = payerEmail;
        this.payerCustomerId = payerCustomerId;
        this.payerCustomerBindingId = payerCustomerBindingId;
        this.payerCustomerRecPaymentToolId = payerCustomerRecPaymentToolId;
        this.context = context;
        this.paymentFlowType = paymentFlowType;
        this.paymentFlowOnHoldExpiration = paymentFlowOnHoldExpiration;
        this.paymentFlowHeldUntil = paymentFlowHeldUntil;
        this.riskScore = riskScore;
        this.routeProviderId = routeProviderId;
        this.routeTerminalId = routeTerminalId;
        this.wtime = wtime;
        this.current = current;
        this.sessionPayloadTransactionBoundTrxId = sessionPayloadTransactionBoundTrxId;
        this.sessionPayloadTransactionBoundTrxExtraJson = sessionPayloadTransactionBoundTrxExtraJson;
        this.fee = fee;
        this.providerFee = providerFee;
        this.externalFee = externalFee;
        this.guaranteeDeposit = guaranteeDeposit;
        this.makeRecurrent = makeRecurrent;
        this.payerRecurrentParentInvoiceId = payerRecurrentParentInvoiceId;
        this.payerRecurrentParentPaymentId = payerRecurrentParentPaymentId;
        this.recurrentIntentionToken = recurrentIntentionToken;
    }

    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getEventId() {
        return this.eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    public LocalDateTime getEventCreatedAt() {
        return this.eventCreatedAt;
    }

    public void setEventCreatedAt(LocalDateTime eventCreatedAt) {
        this.eventCreatedAt = eventCreatedAt;
    }

    public String getPaymentId() {
        return this.paymentId;
    }

    public void setPaymentId(String paymentId) {
        this.paymentId = paymentId;
    }

    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public String getInvoiceId() {
        return this.invoiceId;
    }

    public void setInvoiceId(String invoiceId) {
        this.invoiceId = invoiceId;
    }

    public String getPartyId() {
        return this.partyId;
    }

    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }

    public String getShopId() {
        return this.shopId;
    }

    public void setShopId(String shopId) {
        this.shopId = shopId;
    }

    public Long getDomainRevision() {
        return this.domainRevision;
    }

    public void setDomainRevision(Long domainRevision) {
        this.domainRevision = domainRevision;
    }

    public Long getPartyRevision() {
        return this.partyRevision;
    }

    public void setPartyRevision(Long partyRevision) {
        this.partyRevision = partyRevision;
    }

    public PaymentStatus getStatus() {
        return this.status;
    }

    public void setStatus(PaymentStatus status) {
        this.status = status;
    }

    public String getStatusCancelledReason() {
        return this.statusCancelledReason;
    }

    public void setStatusCancelledReason(String statusCancelledReason) {
        this.statusCancelledReason = statusCancelledReason;
    }

    public String getStatusCapturedReason() {
        return this.statusCapturedReason;
    }

    public void setStatusCapturedReason(String statusCapturedReason) {
        this.statusCapturedReason = statusCapturedReason;
    }

    public String getStatusFailedFailure() {
        return this.statusFailedFailure;
    }

    public void setStatusFailedFailure(String statusFailedFailure) {
        this.statusFailedFailure = statusFailedFailure;
    }

    public Long getAmount() {
        return this.amount;
    }

    public void setAmount(Long amount) {
        this.amount = amount;
    }

    public String getCurrencyCode() {
        return this.currencyCode;
    }

    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
    }

    public PayerType getPayerType() {
        return this.payerType;
    }

    public void setPayerType(PayerType payerType) {
        this.payerType = payerType;
    }

    public PaymentToolType getPayerPaymentToolType() {
        return this.payerPaymentToolType;
    }

    public void setPayerPaymentToolType(PaymentToolType payerPaymentToolType) {
        this.payerPaymentToolType = payerPaymentToolType;
    }

    public String getPayerBankCardToken() {
        return this.payerBankCardToken;
    }

    public void setPayerBankCardToken(String payerBankCardToken) {
        this.payerBankCardToken = payerBankCardToken;
    }

    public String getPayerBankCardPaymentSystem() {
        return this.payerBankCardPaymentSystem;
    }

    public void setPayerBankCardPaymentSystem(String payerBankCardPaymentSystem) {
        this.payerBankCardPaymentSystem = payerBankCardPaymentSystem;
    }

    public String getPayerBankCardBin() {
        return this.payerBankCardBin;
    }

    public void setPayerBankCardBin(String payerBankCardBin) {
        this.payerBankCardBin = payerBankCardBin;
    }

    public String getPayerBankCardMaskedPan() {
        return this.payerBankCardMaskedPan;
    }

    public void setPayerBankCardMaskedPan(String payerBankCardMaskedPan) {
        this.payerBankCardMaskedPan = payerBankCardMaskedPan;
    }

    public String getPayerBankCardTokenProvider() {
        return this.payerBankCardTokenProvider;
    }

    public void setPayerBankCardTokenProvider(String payerBankCardTokenProvider) {
        this.payerBankCardTokenProvider = payerBankCardTokenProvider;
    }

    public String getPayerPaymentTerminalType() {
        return this.payerPaymentTerminalType;
    }

    public void setPayerPaymentTerminalType(String payerPaymentTerminalType) {
        this.payerPaymentTerminalType = payerPaymentTerminalType;
    }

    public String getPayerDigitalWalletProvider() {
        return this.payerDigitalWalletProvider;
    }

    public void setPayerDigitalWalletProvider(String payerDigitalWalletProvider) {
        this.payerDigitalWalletProvider = payerDigitalWalletProvider;
    }

    public String getPayerDigitalWalletId() {
        return this.payerDigitalWalletId;
    }

    public void setPayerDigitalWalletId(String payerDigitalWalletId) {
        this.payerDigitalWalletId = payerDigitalWalletId;
    }

    public String getPayerPaymentSessionId() {
        return this.payerPaymentSessionId;
    }

    public void setPayerPaymentSessionId(String payerPaymentSessionId) {
        this.payerPaymentSessionId = payerPaymentSessionId;
    }

    public String getPayerIpAddress() {
        return this.payerIpAddress;
    }

    public void setPayerIpAddress(String payerIpAddress) {
        this.payerIpAddress = payerIpAddress;
    }

    public String getPayerFingerprint() {
        return this.payerFingerprint;
    }

    public void setPayerFingerprint(String payerFingerprint) {
        this.payerFingerprint = payerFingerprint;
    }

    public String getPayerPhoneNumber() {
        return this.payerPhoneNumber;
    }

    public void setPayerPhoneNumber(String payerPhoneNumber) {
        this.payerPhoneNumber = payerPhoneNumber;
    }

    public String getPayerEmail() {
        return this.payerEmail;
    }

    public void setPayerEmail(String payerEmail) {
        this.payerEmail = payerEmail;
    }

    public String getPayerCustomerId() {
        return this.payerCustomerId;
    }

    public void setPayerCustomerId(String payerCustomerId) {
        this.payerCustomerId = payerCustomerId;
    }

    public String getPayerCustomerBindingId() {
        return this.payerCustomerBindingId;
    }

    public void setPayerCustomerBindingId(String payerCustomerBindingId) {
        this.payerCustomerBindingId = payerCustomerBindingId;
    }

    public String getPayerCustomerRecPaymentToolId() {
        return this.payerCustomerRecPaymentToolId;
    }

    public void setPayerCustomerRecPaymentToolId(String payerCustomerRecPaymentToolId) {
        this.payerCustomerRecPaymentToolId = payerCustomerRecPaymentToolId;
    }

    public byte[] getContext() {
        return this.context;
    }

    public void setContext(byte... context) {
        this.context = context;
    }

    public PaymentFlowType getPaymentFlowType() {
        return this.paymentFlowType;
    }

    public void setPaymentFlowType(PaymentFlowType paymentFlowType) {
        this.paymentFlowType = paymentFlowType;
    }

    public String getPaymentFlowOnHoldExpiration() {
        return this.paymentFlowOnHoldExpiration;
    }

    public void setPaymentFlowOnHoldExpiration(String paymentFlowOnHoldExpiration) {
        this.paymentFlowOnHoldExpiration = paymentFlowOnHoldExpiration;
    }

    public LocalDateTime getPaymentFlowHeldUntil() {
        return this.paymentFlowHeldUntil;
    }

    public void setPaymentFlowHeldUntil(LocalDateTime paymentFlowHeldUntil) {
        this.paymentFlowHeldUntil = paymentFlowHeldUntil;
    }

    public RiskScore getRiskScore() {
        return this.riskScore;
    }

    public void setRiskScore(RiskScore riskScore) {
        this.riskScore = riskScore;
    }

    public Integer getRouteProviderId() {
        return this.routeProviderId;
    }

    public void setRouteProviderId(Integer routeProviderId) {
        this.routeProviderId = routeProviderId;
    }

    public Integer getRouteTerminalId() {
        return this.routeTerminalId;
    }

    public void setRouteTerminalId(Integer routeTerminalId) {
        this.routeTerminalId = routeTerminalId;
    }

    public LocalDateTime getWtime() {
        return this.wtime;
    }

    public void setWtime(LocalDateTime wtime) {
        this.wtime = wtime;
    }

    public Boolean getCurrent() {
        return this.current;
    }

    public void setCurrent(Boolean current) {
        this.current = current;
    }

    public String getSessionPayloadTransactionBoundTrxId() {
        return this.sessionPayloadTransactionBoundTrxId;
    }

    public void setSessionPayloadTransactionBoundTrxId(String sessionPayloadTransactionBoundTrxId) {
        this.sessionPayloadTransactionBoundTrxId = sessionPayloadTransactionBoundTrxId;
    }

    public String getSessionPayloadTransactionBoundTrxExtraJson() {
        return this.sessionPayloadTransactionBoundTrxExtraJson;
    }

    public void setSessionPayloadTransactionBoundTrxExtraJson(String sessionPayloadTransactionBoundTrxExtraJson) {
        this.sessionPayloadTransactionBoundTrxExtraJson = sessionPayloadTransactionBoundTrxExtraJson;
    }

    public Long getFee() {
        return this.fee;
    }

    public void setFee(Long fee) {
        this.fee = fee;
    }

    public Long getProviderFee() {
        return this.providerFee;
    }

    public void setProviderFee(Long providerFee) {
        this.providerFee = providerFee;
    }

    public Long getExternalFee() {
        return this.externalFee;
    }

    public void setExternalFee(Long externalFee) {
        this.externalFee = externalFee;
    }

    public Long getGuaranteeDeposit() {
        return this.guaranteeDeposit;
    }

    public void setGuaranteeDeposit(Long guaranteeDeposit) {
        this.guaranteeDeposit = guaranteeDeposit;
    }

    public Boolean getMakeRecurrent() {
        return this.makeRecurrent;
    }

    public void setMakeRecurrent(Boolean makeRecurrent) {
        this.makeRecurrent = makeRecurrent;
    }

    public String getPayerRecurrentParentInvoiceId() {
        return this.payerRecurrentParentInvoiceId;
    }

    public void setPayerRecurrentParentInvoiceId(String payerRecurrentParentInvoiceId) {
        this.payerRecurrentParentInvoiceId = payerRecurrentParentInvoiceId;
    }

    public String getPayerRecurrentParentPaymentId() {
        return this.payerRecurrentParentPaymentId;
    }

    public void setPayerRecurrentParentPaymentId(String payerRecurrentParentPaymentId) {
        this.payerRecurrentParentPaymentId = payerRecurrentParentPaymentId;
    }

    public String getRecurrentIntentionToken() {
        return this.recurrentIntentionToken;
    }

    public void setRecurrentIntentionToken(String recurrentIntentionToken) {
        this.recurrentIntentionToken = recurrentIntentionToken;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Payment other = (Payment) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (eventId == null) {
            if (other.eventId != null)
                return false;
        }
        else if (!eventId.equals(other.eventId))
            return false;
        if (eventCreatedAt == null) {
            if (other.eventCreatedAt != null)
                return false;
        }
        else if (!eventCreatedAt.equals(other.eventCreatedAt))
            return false;
        if (paymentId == null) {
            if (other.paymentId != null)
                return false;
        }
        else if (!paymentId.equals(other.paymentId))
            return false;
        if (createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!createdAt.equals(other.createdAt))
            return false;
        if (invoiceId == null) {
            if (other.invoiceId != null)
                return false;
        }
        else if (!invoiceId.equals(other.invoiceId))
            return false;
        if (partyId == null) {
            if (other.partyId != null)
                return false;
        }
        else if (!partyId.equals(other.partyId))
            return false;
        if (shopId == null) {
            if (other.shopId != null)
                return false;
        }
        else if (!shopId.equals(other.shopId))
            return false;
        if (domainRevision == null) {
            if (other.domainRevision != null)
                return false;
        }
        else if (!domainRevision.equals(other.domainRevision))
            return false;
        if (partyRevision == null) {
            if (other.partyRevision != null)
                return false;
        }
        else if (!partyRevision.equals(other.partyRevision))
            return false;
        if (status == null) {
            if (other.status != null)
                return false;
        }
        else if (!status.equals(other.status))
            return false;
        if (statusCancelledReason == null) {
            if (other.statusCancelledReason != null)
                return false;
        }
        else if (!statusCancelledReason.equals(other.statusCancelledReason))
            return false;
        if (statusCapturedReason == null) {
            if (other.statusCapturedReason != null)
                return false;
        }
        else if (!statusCapturedReason.equals(other.statusCapturedReason))
            return false;
        if (statusFailedFailure == null) {
            if (other.statusFailedFailure != null)
                return false;
        }
        else if (!statusFailedFailure.equals(other.statusFailedFailure))
            return false;
        if (amount == null) {
            if (other.amount != null)
                return false;
        }
        else if (!amount.equals(other.amount))
            return false;
        if (currencyCode == null) {
            if (other.currencyCode != null)
                return false;
        }
        else if (!currencyCode.equals(other.currencyCode))
            return false;
        if (payerType == null) {
            if (other.payerType != null)
                return false;
        }
        else if (!payerType.equals(other.payerType))
            return false;
        if (payerPaymentToolType == null) {
            if (other.payerPaymentToolType != null)
                return false;
        }
        else if (!payerPaymentToolType.equals(other.payerPaymentToolType))
            return false;
        if (payerBankCardToken == null) {
            if (other.payerBankCardToken != null)
                return false;
        }
        else if (!payerBankCardToken.equals(other.payerBankCardToken))
            return false;
        if (payerBankCardPaymentSystem == null) {
            if (other.payerBankCardPaymentSystem != null)
                return false;
        }
        else if (!payerBankCardPaymentSystem.equals(other.payerBankCardPaymentSystem))
            return false;
        if (payerBankCardBin == null) {
            if (other.payerBankCardBin != null)
                return false;
        }
        else if (!payerBankCardBin.equals(other.payerBankCardBin))
            return false;
        if (payerBankCardMaskedPan == null) {
            if (other.payerBankCardMaskedPan != null)
                return false;
        }
        else if (!payerBankCardMaskedPan.equals(other.payerBankCardMaskedPan))
            return false;
        if (payerBankCardTokenProvider == null) {
            if (other.payerBankCardTokenProvider != null)
                return false;
        }
        else if (!payerBankCardTokenProvider.equals(other.payerBankCardTokenProvider))
            return false;
        if (payerPaymentTerminalType == null) {
            if (other.payerPaymentTerminalType != null)
                return false;
        }
        else if (!payerPaymentTerminalType.equals(other.payerPaymentTerminalType))
            return false;
        if (payerDigitalWalletProvider == null) {
            if (other.payerDigitalWalletProvider != null)
                return false;
        }
        else if (!payerDigitalWalletProvider.equals(other.payerDigitalWalletProvider))
            return false;
        if (payerDigitalWalletId == null) {
            if (other.payerDigitalWalletId != null)
                return false;
        }
        else if (!payerDigitalWalletId.equals(other.payerDigitalWalletId))
            return false;
        if (payerPaymentSessionId == null) {
            if (other.payerPaymentSessionId != null)
                return false;
        }
        else if (!payerPaymentSessionId.equals(other.payerPaymentSessionId))
            return false;
        if (payerIpAddress == null) {
            if (other.payerIpAddress != null)
                return false;
        }
        else if (!payerIpAddress.equals(other.payerIpAddress))
            return false;
        if (payerFingerprint == null) {
            if (other.payerFingerprint != null)
                return false;
        }
        else if (!payerFingerprint.equals(other.payerFingerprint))
            return false;
        if (payerPhoneNumber == null) {
            if (other.payerPhoneNumber != null)
                return false;
        }
        else if (!payerPhoneNumber.equals(other.payerPhoneNumber))
            return false;
        if (payerEmail == null) {
            if (other.payerEmail != null)
                return false;
        }
        else if (!payerEmail.equals(other.payerEmail))
            return false;
        if (payerCustomerId == null) {
            if (other.payerCustomerId != null)
                return false;
        }
        else if (!payerCustomerId.equals(other.payerCustomerId))
            return false;
        if (payerCustomerBindingId == null) {
            if (other.payerCustomerBindingId != null)
                return false;
        }
        else if (!payerCustomerBindingId.equals(other.payerCustomerBindingId))
            return false;
        if (payerCustomerRecPaymentToolId == null) {
            if (other.payerCustomerRecPaymentToolId != null)
                return false;
        }
        else if (!payerCustomerRecPaymentToolId.equals(other.payerCustomerRecPaymentToolId))
            return false;
        if (context == null) {
            if (other.context != null)
                return false;
        }
        else if (!Arrays.equals(context, other.context))
            return false;
        if (paymentFlowType == null) {
            if (other.paymentFlowType != null)
                return false;
        }
        else if (!paymentFlowType.equals(other.paymentFlowType))
            return false;
        if (paymentFlowOnHoldExpiration == null) {
            if (other.paymentFlowOnHoldExpiration != null)
                return false;
        }
        else if (!paymentFlowOnHoldExpiration.equals(other.paymentFlowOnHoldExpiration))
            return false;
        if (paymentFlowHeldUntil == null) {
            if (other.paymentFlowHeldUntil != null)
                return false;
        }
        else if (!paymentFlowHeldUntil.equals(other.paymentFlowHeldUntil))
            return false;
        if (riskScore == null) {
            if (other.riskScore != null)
                return false;
        }
        else if (!riskScore.equals(other.riskScore))
            return false;
        if (routeProviderId == null) {
            if (other.routeProviderId != null)
                return false;
        }
        else if (!routeProviderId.equals(other.routeProviderId))
            return false;
        if (routeTerminalId == null) {
            if (other.routeTerminalId != null)
                return false;
        }
        else if (!routeTerminalId.equals(other.routeTerminalId))
            return false;
        if (wtime == null) {
            if (other.wtime != null)
                return false;
        }
        else if (!wtime.equals(other.wtime))
            return false;
        if (current == null) {
            if (other.current != null)
                return false;
        }
        else if (!current.equals(other.current))
            return false;
        if (sessionPayloadTransactionBoundTrxId == null) {
            if (other.sessionPayloadTransactionBoundTrxId != null)
                return false;
        }
        else if (!sessionPayloadTransactionBoundTrxId.equals(other.sessionPayloadTransactionBoundTrxId))
            return false;
        if (sessionPayloadTransactionBoundTrxExtraJson == null) {
            if (other.sessionPayloadTransactionBoundTrxExtraJson != null)
                return false;
        }
        else if (!sessionPayloadTransactionBoundTrxExtraJson.equals(other.sessionPayloadTransactionBoundTrxExtraJson))
            return false;
        if (fee == null) {
            if (other.fee != null)
                return false;
        }
        else if (!fee.equals(other.fee))
            return false;
        if (providerFee == null) {
            if (other.providerFee != null)
                return false;
        }
        else if (!providerFee.equals(other.providerFee))
            return false;
        if (externalFee == null) {
            if (other.externalFee != null)
                return false;
        }
        else if (!externalFee.equals(other.externalFee))
            return false;
        if (guaranteeDeposit == null) {
            if (other.guaranteeDeposit != null)
                return false;
        }
        else if (!guaranteeDeposit.equals(other.guaranteeDeposit))
            return false;
        if (makeRecurrent == null) {
            if (other.makeRecurrent != null)
                return false;
        }
        else if (!makeRecurrent.equals(other.makeRecurrent))
            return false;
        if (payerRecurrentParentInvoiceId == null) {
            if (other.payerRecurrentParentInvoiceId != null)
                return false;
        }
        else if (!payerRecurrentParentInvoiceId.equals(other.payerRecurrentParentInvoiceId))
            return false;
        if (payerRecurrentParentPaymentId == null) {
            if (other.payerRecurrentParentPaymentId != null)
                return false;
        }
        else if (!payerRecurrentParentPaymentId.equals(other.payerRecurrentParentPaymentId))
            return false;
        if (recurrentIntentionToken == null) {
            if (other.recurrentIntentionToken != null)
                return false;
        }
        else if (!recurrentIntentionToken.equals(other.recurrentIntentionToken))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.eventId == null) ? 0 : this.eventId.hashCode());
        result = prime * result + ((this.eventCreatedAt == null) ? 0 : this.eventCreatedAt.hashCode());
        result = prime * result + ((this.paymentId == null) ? 0 : this.paymentId.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.invoiceId == null) ? 0 : this.invoiceId.hashCode());
        result = prime * result + ((this.partyId == null) ? 0 : this.partyId.hashCode());
        result = prime * result + ((this.shopId == null) ? 0 : this.shopId.hashCode());
        result = prime * result + ((this.domainRevision == null) ? 0 : this.domainRevision.hashCode());
        result = prime * result + ((this.partyRevision == null) ? 0 : this.partyRevision.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.statusCancelledReason == null) ? 0 : this.statusCancelledReason.hashCode());
        result = prime * result + ((this.statusCapturedReason == null) ? 0 : this.statusCapturedReason.hashCode());
        result = prime * result + ((this.statusFailedFailure == null) ? 0 : this.statusFailedFailure.hashCode());
        result = prime * result + ((this.amount == null) ? 0 : this.amount.hashCode());
        result = prime * result + ((this.currencyCode == null) ? 0 : this.currencyCode.hashCode());
        result = prime * result + ((this.payerType == null) ? 0 : this.payerType.hashCode());
        result = prime * result + ((this.payerPaymentToolType == null) ? 0 : this.payerPaymentToolType.hashCode());
        result = prime * result + ((this.payerBankCardToken == null) ? 0 : this.payerBankCardToken.hashCode());
        result = prime * result + ((this.payerBankCardPaymentSystem == null) ? 0 : this.payerBankCardPaymentSystem.hashCode());
        result = prime * result + ((this.payerBankCardBin == null) ? 0 : this.payerBankCardBin.hashCode());
        result = prime * result + ((this.payerBankCardMaskedPan == null) ? 0 : this.payerBankCardMaskedPan.hashCode());
        result = prime * result + ((this.payerBankCardTokenProvider == null) ? 0 : this.payerBankCardTokenProvider.hashCode());
        result = prime * result + ((this.payerPaymentTerminalType == null) ? 0 : this.payerPaymentTerminalType.hashCode());
        result = prime * result + ((this.payerDigitalWalletProvider == null) ? 0 : this.payerDigitalWalletProvider.hashCode());
        result = prime * result + ((this.payerDigitalWalletId == null) ? 0 : this.payerDigitalWalletId.hashCode());
        result = prime * result + ((this.payerPaymentSessionId == null) ? 0 : this.payerPaymentSessionId.hashCode());
        result = prime * result + ((this.payerIpAddress == null) ? 0 : this.payerIpAddress.hashCode());
        result = prime * result + ((this.payerFingerprint == null) ? 0 : this.payerFingerprint.hashCode());
        result = prime * result + ((this.payerPhoneNumber == null) ? 0 : this.payerPhoneNumber.hashCode());
        result = prime * result + ((this.payerEmail == null) ? 0 : this.payerEmail.hashCode());
        result = prime * result + ((this.payerCustomerId == null) ? 0 : this.payerCustomerId.hashCode());
        result = prime * result + ((this.payerCustomerBindingId == null) ? 0 : this.payerCustomerBindingId.hashCode());
        result = prime * result + ((this.payerCustomerRecPaymentToolId == null) ? 0 : this.payerCustomerRecPaymentToolId.hashCode());
        result = prime * result + ((this.context == null) ? 0 : Arrays.hashCode(this.context));
        result = prime * result + ((this.paymentFlowType == null) ? 0 : this.paymentFlowType.hashCode());
        result = prime * result + ((this.paymentFlowOnHoldExpiration == null) ? 0 : this.paymentFlowOnHoldExpiration.hashCode());
        result = prime * result + ((this.paymentFlowHeldUntil == null) ? 0 : this.paymentFlowHeldUntil.hashCode());
        result = prime * result + ((this.riskScore == null) ? 0 : this.riskScore.hashCode());
        result = prime * result + ((this.routeProviderId == null) ? 0 : this.routeProviderId.hashCode());
        result = prime * result + ((this.routeTerminalId == null) ? 0 : this.routeTerminalId.hashCode());
        result = prime * result + ((this.wtime == null) ? 0 : this.wtime.hashCode());
        result = prime * result + ((this.current == null) ? 0 : this.current.hashCode());
        result = prime * result + ((this.sessionPayloadTransactionBoundTrxId == null) ? 0 : this.sessionPayloadTransactionBoundTrxId.hashCode());
        result = prime * result + ((this.sessionPayloadTransactionBoundTrxExtraJson == null) ? 0 : this.sessionPayloadTransactionBoundTrxExtraJson.hashCode());
        result = prime * result + ((this.fee == null) ? 0 : this.fee.hashCode());
        result = prime * result + ((this.providerFee == null) ? 0 : this.providerFee.hashCode());
        result = prime * result + ((this.externalFee == null) ? 0 : this.externalFee.hashCode());
        result = prime * result + ((this.guaranteeDeposit == null) ? 0 : this.guaranteeDeposit.hashCode());
        result = prime * result + ((this.makeRecurrent == null) ? 0 : this.makeRecurrent.hashCode());
        result = prime * result + ((this.payerRecurrentParentInvoiceId == null) ? 0 : this.payerRecurrentParentInvoiceId.hashCode());
        result = prime * result + ((this.payerRecurrentParentPaymentId == null) ? 0 : this.payerRecurrentParentPaymentId.hashCode());
        result = prime * result + ((this.recurrentIntentionToken == null) ? 0 : this.recurrentIntentionToken.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Payment (");

        sb.append(id);
        sb.append(", ").append(eventId);
        sb.append(", ").append(eventCreatedAt);
        sb.append(", ").append(paymentId);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(invoiceId);
        sb.append(", ").append(partyId);
        sb.append(", ").append(shopId);
        sb.append(", ").append(domainRevision);
        sb.append(", ").append(partyRevision);
        sb.append(", ").append(status);
        sb.append(", ").append(statusCancelledReason);
        sb.append(", ").append(statusCapturedReason);
        sb.append(", ").append(statusFailedFailure);
        sb.append(", ").append(amount);
        sb.append(", ").append(currencyCode);
        sb.append(", ").append(payerType);
        sb.append(", ").append(payerPaymentToolType);
        sb.append(", ").append(payerBankCardToken);
        sb.append(", ").append(payerBankCardPaymentSystem);
        sb.append(", ").append(payerBankCardBin);
        sb.append(", ").append(payerBankCardMaskedPan);
        sb.append(", ").append(payerBankCardTokenProvider);
        sb.append(", ").append(payerPaymentTerminalType);
        sb.append(", ").append(payerDigitalWalletProvider);
        sb.append(", ").append(payerDigitalWalletId);
        sb.append(", ").append(payerPaymentSessionId);
        sb.append(", ").append(payerIpAddress);
        sb.append(", ").append(payerFingerprint);
        sb.append(", ").append(payerPhoneNumber);
        sb.append(", ").append(payerEmail);
        sb.append(", ").append(payerCustomerId);
        sb.append(", ").append(payerCustomerBindingId);
        sb.append(", ").append(payerCustomerRecPaymentToolId);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(paymentFlowType);
        sb.append(", ").append(paymentFlowOnHoldExpiration);
        sb.append(", ").append(paymentFlowHeldUntil);
        sb.append(", ").append(riskScore);
        sb.append(", ").append(routeProviderId);
        sb.append(", ").append(routeTerminalId);
        sb.append(", ").append(wtime);
        sb.append(", ").append(current);
        sb.append(", ").append(sessionPayloadTransactionBoundTrxId);
        sb.append(", ").append(sessionPayloadTransactionBoundTrxExtraJson);
        sb.append(", ").append(fee);
        sb.append(", ").append(providerFee);
        sb.append(", ").append(externalFee);
        sb.append(", ").append(guaranteeDeposit);
        sb.append(", ").append(makeRecurrent);
        sb.append(", ").append(payerRecurrentParentInvoiceId);
        sb.append(", ").append(payerRecurrentParentPaymentId);
        sb.append(", ").append(recurrentIntentionToken);

        sb.append(")");
        return sb.toString();
    }
}
