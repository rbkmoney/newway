/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.newway.domain.tables;


import com.rbkmoney.newway.domain.Keys;
import com.rbkmoney.newway.domain.Nw;
import com.rbkmoney.newway.domain.enums.ChallengeResolution;
import com.rbkmoney.newway.domain.enums.ChallengeStatus;
import com.rbkmoney.newway.domain.tables.records.ChallengeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Challenge extends TableImpl<ChallengeRecord> {

    private static final long serialVersionUID = 283611689;

    /**
     * The reference instance of <code>nw.challenge</code>
     */
    public static final Challenge CHALLENGE = new Challenge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChallengeRecord> getRecordType() {
        return ChallengeRecord.class;
    }

    /**
     * The column <code>nw.challenge.id</code>.
     */
    public final TableField<ChallengeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('nw.challenge_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>nw.challenge.event_id</code>.
     */
    public final TableField<ChallengeRecord, Long> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.challenge.event_created_at</code>.
     */
    public final TableField<ChallengeRecord, LocalDateTime> EVENT_CREATED_AT = createField("event_created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>nw.challenge.event_occured_at</code>.
     */
    public final TableField<ChallengeRecord, LocalDateTime> EVENT_OCCURED_AT = createField("event_occured_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>nw.challenge.sequence_id</code>.
     */
    public final TableField<ChallengeRecord, Integer> SEQUENCE_ID = createField("sequence_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>nw.challenge.identity_id</code>.
     */
    public final TableField<ChallengeRecord, String> IDENTITY_ID = createField("identity_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.challenge.challenge_id</code>.
     */
    public final TableField<ChallengeRecord, String> CHALLENGE_ID = createField("challenge_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.challenge.challenge_class_id</code>.
     */
    public final TableField<ChallengeRecord, String> CHALLENGE_CLASS_ID = createField("challenge_class_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.challenge.challenge_status</code>.
     */
    public final TableField<ChallengeRecord, ChallengeStatus> CHALLENGE_STATUS = createField("challenge_status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.ChallengeStatus.class), this, "");

    /**
     * The column <code>nw.challenge.challenge_resolution</code>.
     */
    public final TableField<ChallengeRecord, ChallengeResolution> CHALLENGE_RESOLUTION = createField("challenge_resolution", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.ChallengeResolution.class), this, "");

    /**
     * The column <code>nw.challenge.challenge_valid_until</code>.
     */
    public final TableField<ChallengeRecord, LocalDateTime> CHALLENGE_VALID_UNTIL = createField("challenge_valid_until", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>nw.challenge.wtime</code>.
     */
    public final TableField<ChallengeRecord, LocalDateTime> WTIME = createField("wtime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("timezone('utc'::text, now())", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>nw.challenge.current</code>.
     */
    public final TableField<ChallengeRecord, Boolean> CURRENT = createField("current", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>nw.challenge</code> table reference
     */
    public Challenge() {
        this("challenge", null);
    }

    /**
     * Create an aliased <code>nw.challenge</code> table reference
     */
    public Challenge(String alias) {
        this(alias, CHALLENGE);
    }

    private Challenge(String alias, Table<ChallengeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Challenge(String alias, Table<ChallengeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Nw.NW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ChallengeRecord, Long> getIdentity() {
        return Keys.IDENTITY_CHALLENGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ChallengeRecord> getPrimaryKey() {
        return Keys.CHALLENGE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ChallengeRecord>> getKeys() {
        return Arrays.<UniqueKey<ChallengeRecord>>asList(Keys.CHALLENGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Challenge as(String alias) {
        return new Challenge(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Challenge rename(String name) {
        return new Challenge(name, null);
    }
}
