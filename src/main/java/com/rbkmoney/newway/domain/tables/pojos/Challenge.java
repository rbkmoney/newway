/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.newway.domain.tables.pojos;


import com.rbkmoney.newway.domain.enums.ChallengeResolution;
import com.rbkmoney.newway.domain.enums.ChallengeStatus;

import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Challenge implements Serializable {

    private static final long serialVersionUID = -330881917;

    private Long                id;
    private Long                eventId;
    private LocalDateTime       eventCreatedAt;
    private LocalDateTime       eventOccuredAt;
    private Integer             sequenceId;
    private String              identityId;
    private String              challengeId;
    private String              challengeClassId;
    private ChallengeStatus     challengeStatus;
    private ChallengeResolution challengeResolution;
    private LocalDateTime       challengeValidUntil;
    private LocalDateTime       wtime;
    private Boolean             current;

    public Challenge() {}

    public Challenge(Challenge value) {
        this.id = value.id;
        this.eventId = value.eventId;
        this.eventCreatedAt = value.eventCreatedAt;
        this.eventOccuredAt = value.eventOccuredAt;
        this.sequenceId = value.sequenceId;
        this.identityId = value.identityId;
        this.challengeId = value.challengeId;
        this.challengeClassId = value.challengeClassId;
        this.challengeStatus = value.challengeStatus;
        this.challengeResolution = value.challengeResolution;
        this.challengeValidUntil = value.challengeValidUntil;
        this.wtime = value.wtime;
        this.current = value.current;
    }

    public Challenge(
        Long                id,
        Long                eventId,
        LocalDateTime       eventCreatedAt,
        LocalDateTime       eventOccuredAt,
        Integer             sequenceId,
        String              identityId,
        String              challengeId,
        String              challengeClassId,
        ChallengeStatus     challengeStatus,
        ChallengeResolution challengeResolution,
        LocalDateTime       challengeValidUntil,
        LocalDateTime       wtime,
        Boolean             current
    ) {
        this.id = id;
        this.eventId = eventId;
        this.eventCreatedAt = eventCreatedAt;
        this.eventOccuredAt = eventOccuredAt;
        this.sequenceId = sequenceId;
        this.identityId = identityId;
        this.challengeId = challengeId;
        this.challengeClassId = challengeClassId;
        this.challengeStatus = challengeStatus;
        this.challengeResolution = challengeResolution;
        this.challengeValidUntil = challengeValidUntil;
        this.wtime = wtime;
        this.current = current;
    }

    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getEventId() {
        return this.eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    public LocalDateTime getEventCreatedAt() {
        return this.eventCreatedAt;
    }

    public void setEventCreatedAt(LocalDateTime eventCreatedAt) {
        this.eventCreatedAt = eventCreatedAt;
    }

    public LocalDateTime getEventOccuredAt() {
        return this.eventOccuredAt;
    }

    public void setEventOccuredAt(LocalDateTime eventOccuredAt) {
        this.eventOccuredAt = eventOccuredAt;
    }

    public Integer getSequenceId() {
        return this.sequenceId;
    }

    public void setSequenceId(Integer sequenceId) {
        this.sequenceId = sequenceId;
    }

    public String getIdentityId() {
        return this.identityId;
    }

    public void setIdentityId(String identityId) {
        this.identityId = identityId;
    }

    public String getChallengeId() {
        return this.challengeId;
    }

    public void setChallengeId(String challengeId) {
        this.challengeId = challengeId;
    }

    public String getChallengeClassId() {
        return this.challengeClassId;
    }

    public void setChallengeClassId(String challengeClassId) {
        this.challengeClassId = challengeClassId;
    }

    public ChallengeStatus getChallengeStatus() {
        return this.challengeStatus;
    }

    public void setChallengeStatus(ChallengeStatus challengeStatus) {
        this.challengeStatus = challengeStatus;
    }

    public ChallengeResolution getChallengeResolution() {
        return this.challengeResolution;
    }

    public void setChallengeResolution(ChallengeResolution challengeResolution) {
        this.challengeResolution = challengeResolution;
    }

    public LocalDateTime getChallengeValidUntil() {
        return this.challengeValidUntil;
    }

    public void setChallengeValidUntil(LocalDateTime challengeValidUntil) {
        this.challengeValidUntil = challengeValidUntil;
    }

    public LocalDateTime getWtime() {
        return this.wtime;
    }

    public void setWtime(LocalDateTime wtime) {
        this.wtime = wtime;
    }

    public Boolean getCurrent() {
        return this.current;
    }

    public void setCurrent(Boolean current) {
        this.current = current;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Challenge other = (Challenge) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (eventId == null) {
            if (other.eventId != null)
                return false;
        }
        else if (!eventId.equals(other.eventId))
            return false;
        if (eventCreatedAt == null) {
            if (other.eventCreatedAt != null)
                return false;
        }
        else if (!eventCreatedAt.equals(other.eventCreatedAt))
            return false;
        if (eventOccuredAt == null) {
            if (other.eventOccuredAt != null)
                return false;
        }
        else if (!eventOccuredAt.equals(other.eventOccuredAt))
            return false;
        if (sequenceId == null) {
            if (other.sequenceId != null)
                return false;
        }
        else if (!sequenceId.equals(other.sequenceId))
            return false;
        if (identityId == null) {
            if (other.identityId != null)
                return false;
        }
        else if (!identityId.equals(other.identityId))
            return false;
        if (challengeId == null) {
            if (other.challengeId != null)
                return false;
        }
        else if (!challengeId.equals(other.challengeId))
            return false;
        if (challengeClassId == null) {
            if (other.challengeClassId != null)
                return false;
        }
        else if (!challengeClassId.equals(other.challengeClassId))
            return false;
        if (challengeStatus == null) {
            if (other.challengeStatus != null)
                return false;
        }
        else if (!challengeStatus.equals(other.challengeStatus))
            return false;
        if (challengeResolution == null) {
            if (other.challengeResolution != null)
                return false;
        }
        else if (!challengeResolution.equals(other.challengeResolution))
            return false;
        if (challengeValidUntil == null) {
            if (other.challengeValidUntil != null)
                return false;
        }
        else if (!challengeValidUntil.equals(other.challengeValidUntil))
            return false;
        if (wtime == null) {
            if (other.wtime != null)
                return false;
        }
        else if (!wtime.equals(other.wtime))
            return false;
        if (current == null) {
            if (other.current != null)
                return false;
        }
        else if (!current.equals(other.current))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.eventId == null) ? 0 : this.eventId.hashCode());
        result = prime * result + ((this.eventCreatedAt == null) ? 0 : this.eventCreatedAt.hashCode());
        result = prime * result + ((this.eventOccuredAt == null) ? 0 : this.eventOccuredAt.hashCode());
        result = prime * result + ((this.sequenceId == null) ? 0 : this.sequenceId.hashCode());
        result = prime * result + ((this.identityId == null) ? 0 : this.identityId.hashCode());
        result = prime * result + ((this.challengeId == null) ? 0 : this.challengeId.hashCode());
        result = prime * result + ((this.challengeClassId == null) ? 0 : this.challengeClassId.hashCode());
        result = prime * result + ((this.challengeStatus == null) ? 0 : this.challengeStatus.hashCode());
        result = prime * result + ((this.challengeResolution == null) ? 0 : this.challengeResolution.hashCode());
        result = prime * result + ((this.challengeValidUntil == null) ? 0 : this.challengeValidUntil.hashCode());
        result = prime * result + ((this.wtime == null) ? 0 : this.wtime.hashCode());
        result = prime * result + ((this.current == null) ? 0 : this.current.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Challenge (");

        sb.append(id);
        sb.append(", ").append(eventId);
        sb.append(", ").append(eventCreatedAt);
        sb.append(", ").append(eventOccuredAt);
        sb.append(", ").append(sequenceId);
        sb.append(", ").append(identityId);
        sb.append(", ").append(challengeId);
        sb.append(", ").append(challengeClassId);
        sb.append(", ").append(challengeStatus);
        sb.append(", ").append(challengeResolution);
        sb.append(", ").append(challengeValidUntil);
        sb.append(", ").append(wtime);
        sb.append(", ").append(current);

        sb.append(")");
        return sb.toString();
    }
}
