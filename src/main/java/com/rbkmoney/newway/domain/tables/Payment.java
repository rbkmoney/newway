/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.newway.domain.tables;


import com.rbkmoney.newway.domain.Keys;
import com.rbkmoney.newway.domain.Nw;
import com.rbkmoney.newway.domain.enums.PayerType;
import com.rbkmoney.newway.domain.enums.PaymentFlowType;
import com.rbkmoney.newway.domain.enums.PaymentStatus;
import com.rbkmoney.newway.domain.enums.PaymentToolType;
import com.rbkmoney.newway.domain.enums.RiskScore;
import com.rbkmoney.newway.domain.enums.SessionChangePayload;
import com.rbkmoney.newway.domain.enums.SessionChangePayloadFinishedResult;
import com.rbkmoney.newway.domain.enums.SessionTargetStatus;
import com.rbkmoney.newway.domain.tables.records.PaymentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payment extends TableImpl<PaymentRecord> {

    private static final long serialVersionUID = 1696836963;

    /**
     * The reference instance of <code>nw.payment</code>
     */
    public static final Payment PAYMENT = new Payment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecord> getRecordType() {
        return PaymentRecord.class;
    }

    /**
     * The column <code>nw.payment.id</code>.
     */
    public final TableField<PaymentRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('nw.payment_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>nw.payment.event_id</code>.
     */
    public final TableField<PaymentRecord, Long> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.payment.event_created_at</code>.
     */
    public final TableField<PaymentRecord, LocalDateTime> EVENT_CREATED_AT = createField("event_created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>nw.payment.payment_id</code>.
     */
    public final TableField<PaymentRecord, String> PAYMENT_ID = createField("payment_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.payment.created_at</code>.
     */
    public final TableField<PaymentRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>nw.payment.invoice_id</code>.
     */
    public final TableField<PaymentRecord, String> INVOICE_ID = createField("invoice_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.payment.party_id</code>.
     */
    public final TableField<PaymentRecord, String> PARTY_ID = createField("party_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.payment.shop_id</code>.
     */
    public final TableField<PaymentRecord, String> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.payment.domain_revision</code>.
     */
    public final TableField<PaymentRecord, Long> DOMAIN_REVISION = createField("domain_revision", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.payment.party_revision</code>.
     */
    public final TableField<PaymentRecord, Long> PARTY_REVISION = createField("party_revision", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>nw.payment.status</code>.
     */
    public final TableField<PaymentRecord, PaymentStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.PaymentStatus.class), this, "");

    /**
     * The column <code>nw.payment.status_cancelled_reason</code>.
     */
    public final TableField<PaymentRecord, String> STATUS_CANCELLED_REASON = createField("status_cancelled_reason", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.status_captured_reason</code>.
     */
    public final TableField<PaymentRecord, String> STATUS_CAPTURED_REASON = createField("status_captured_reason", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.status_failed_failure</code>.
     */
    public final TableField<PaymentRecord, String> STATUS_FAILED_FAILURE = createField("status_failed_failure", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.amount</code>.
     */
    public final TableField<PaymentRecord, Long> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nw.payment.currency_code</code>.
     */
    public final TableField<PaymentRecord, String> CURRENCY_CODE = createField("currency_code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>nw.payment.payer_type</code>.
     */
    public final TableField<PaymentRecord, PayerType> PAYER_TYPE = createField("payer_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.PayerType.class), this, "");

    /**
     * The column <code>nw.payment.payer_payment_tool_type</code>.
     */
    public final TableField<PaymentRecord, PaymentToolType> PAYER_PAYMENT_TOOL_TYPE = createField("payer_payment_tool_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.PaymentToolType.class), this, "");

    /**
     * The column <code>nw.payment.payer_bank_card_token</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_BANK_CARD_TOKEN = createField("payer_bank_card_token", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_bank_card_payment_system</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_BANK_CARD_PAYMENT_SYSTEM = createField("payer_bank_card_payment_system", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_bank_card_bin</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_BANK_CARD_BIN = createField("payer_bank_card_bin", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_bank_card_masked_pan</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_BANK_CARD_MASKED_PAN = createField("payer_bank_card_masked_pan", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_bank_card_token_provider</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_BANK_CARD_TOKEN_PROVIDER = createField("payer_bank_card_token_provider", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_payment_terminal_type</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_PAYMENT_TERMINAL_TYPE = createField("payer_payment_terminal_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_digital_wallet_provider</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_DIGITAL_WALLET_PROVIDER = createField("payer_digital_wallet_provider", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_digital_wallet_id</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_DIGITAL_WALLET_ID = createField("payer_digital_wallet_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_payment_session_id</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_PAYMENT_SESSION_ID = createField("payer_payment_session_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_ip_address</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_IP_ADDRESS = createField("payer_ip_address", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_fingerprint</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_FINGERPRINT = createField("payer_fingerprint", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_phone_number</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_PHONE_NUMBER = createField("payer_phone_number", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_email</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_EMAIL = createField("payer_email", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_customer_id</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_CUSTOMER_ID = createField("payer_customer_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_customer_binding_id</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_CUSTOMER_BINDING_ID = createField("payer_customer_binding_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payer_customer_rec_payment_tool_id</code>.
     */
    public final TableField<PaymentRecord, String> PAYER_CUSTOMER_REC_PAYMENT_TOOL_ID = createField("payer_customer_rec_payment_tool_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.context</code>.
     */
    public final TableField<PaymentRecord, byte[]> CONTEXT = createField("context", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>nw.payment.payment_flow_type</code>.
     */
    public final TableField<PaymentRecord, PaymentFlowType> PAYMENT_FLOW_TYPE = createField("payment_flow_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.PaymentFlowType.class), this, "");

    /**
     * The column <code>nw.payment.payment_flow_on_hold_expiration</code>.
     */
    public final TableField<PaymentRecord, String> PAYMENT_FLOW_ON_HOLD_EXPIRATION = createField("payment_flow_on_hold_expiration", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.payment_flow_held_until</code>.
     */
    public final TableField<PaymentRecord, LocalDateTime> PAYMENT_FLOW_HELD_UNTIL = createField("payment_flow_held_until", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>nw.payment.risk_score</code>.
     */
    public final TableField<PaymentRecord, RiskScore> RISK_SCORE = createField("risk_score", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.RiskScore.class), this, "");

    /**
     * The column <code>nw.payment.route_provider_id</code>.
     */
    public final TableField<PaymentRecord, Integer> ROUTE_PROVIDER_ID = createField("route_provider_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>nw.payment.route_terminal_id</code>.
     */
    public final TableField<PaymentRecord, Integer> ROUTE_TERMINAL_ID = createField("route_terminal_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>nw.payment.wtime</code>.
     */
    public final TableField<PaymentRecord, LocalDateTime> WTIME = createField("wtime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("timezone('utc'::text, now())", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>nw.payment.current</code>.
     */
    public final TableField<PaymentRecord, Boolean> CURRENT = createField("current", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>nw.payment.session_target</code>.
     */
    public final TableField<PaymentRecord, SessionTargetStatus> SESSION_TARGET = createField("session_target", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.SessionTargetStatus.class), this, "");

    /**
     * The column <code>nw.payment.session_payload</code>.
     */
    public final TableField<PaymentRecord, SessionChangePayload> SESSION_PAYLOAD = createField("session_payload", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.SessionChangePayload.class), this, "");

    /**
     * The column <code>nw.payment.session_payload_finished_result</code>.
     */
    public final TableField<PaymentRecord, SessionChangePayloadFinishedResult> SESSION_PAYLOAD_FINISHED_RESULT = createField("session_payload_finished_result", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.newway.domain.enums.SessionChangePayloadFinishedResult.class), this, "");

    /**
     * The column <code>nw.payment.session_payload_finished_result_failed_failure_json</code>.
     */
    public final TableField<PaymentRecord, String> SESSION_PAYLOAD_FINISHED_RESULT_FAILED_FAILURE_JSON = createField("session_payload_finished_result_failed_failure_json", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.session_payload_suspended_tag</code>.
     */
    public final TableField<PaymentRecord, String> SESSION_PAYLOAD_SUSPENDED_TAG = createField("session_payload_suspended_tag", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.session_payload_transaction_bound_trx_id</code>.
     */
    public final TableField<PaymentRecord, String> SESSION_PAYLOAD_TRANSACTION_BOUND_TRX_ID = createField("session_payload_transaction_bound_trx_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.session_payload_transaction_bound_trx_timestamp</code>.
     */
    public final TableField<PaymentRecord, LocalDateTime> SESSION_PAYLOAD_TRANSACTION_BOUND_TRX_TIMESTAMP = createField("session_payload_transaction_bound_trx_timestamp", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>nw.payment.session_payload_transaction_bound_trx_extra_json</code>.
     */
    public final TableField<PaymentRecord, String> SESSION_PAYLOAD_TRANSACTION_BOUND_TRX_EXTRA_JSON = createField("session_payload_transaction_bound_trx_extra_json", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>nw.payment.session_payload_proxy_state_changed_proxy_state</code>.
     */
    public final TableField<PaymentRecord, byte[]> SESSION_PAYLOAD_PROXY_STATE_CHANGED_PROXY_STATE = createField("session_payload_proxy_state_changed_proxy_state", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>nw.payment.session_payload_interaction_requested_interaction_json</code>.
     */
    public final TableField<PaymentRecord, String> SESSION_PAYLOAD_INTERACTION_REQUESTED_INTERACTION_JSON = createField("session_payload_interaction_requested_interaction_json", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>nw.payment</code> table reference
     */
    public Payment() {
        this("payment", null);
    }

    /**
     * Create an aliased <code>nw.payment</code> table reference
     */
    public Payment(String alias) {
        this(alias, PAYMENT);
    }

    private Payment(String alias, Table<PaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payment(String alias, Table<PaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Nw.NW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PaymentRecord, Long> getIdentity() {
        return Keys.IDENTITY_PAYMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PaymentRecord> getPrimaryKey() {
        return Keys.PAYMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentRecord>>asList(Keys.PAYMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Payment as(String alias) {
        return new Payment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(String name) {
        return new Payment(name, null);
    }
}
