/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.newway.domain.tables.records;


import com.rbkmoney.newway.domain.enums.ChallengeResolution;
import com.rbkmoney.newway.domain.enums.ChallengeStatus;
import com.rbkmoney.newway.domain.tables.Challenge;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChallengeRecord extends UpdatableRecordImpl<ChallengeRecord> implements Record13<Long, Long, LocalDateTime, LocalDateTime, Integer, String, String, String, ChallengeStatus, ChallengeResolution, LocalDateTime, LocalDateTime, Boolean> {

    private static final long serialVersionUID = 1398627731;

    /**
     * Setter for <code>nw.challenge.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>nw.challenge.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>nw.challenge.event_id</code>.
     */
    public void setEventId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>nw.challenge.event_id</code>.
     */
    public Long getEventId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>nw.challenge.event_created_at</code>.
     */
    public void setEventCreatedAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>nw.challenge.event_created_at</code>.
     */
    public LocalDateTime getEventCreatedAt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>nw.challenge.event_occured_at</code>.
     */
    public void setEventOccuredAt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>nw.challenge.event_occured_at</code>.
     */
    public LocalDateTime getEventOccuredAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>nw.challenge.sequence_id</code>.
     */
    public void setSequenceId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>nw.challenge.sequence_id</code>.
     */
    public Integer getSequenceId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>nw.challenge.identity_id</code>.
     */
    public void setIdentityId(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>nw.challenge.identity_id</code>.
     */
    public String getIdentityId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>nw.challenge.challenge_id</code>.
     */
    public void setChallengeId(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>nw.challenge.challenge_id</code>.
     */
    public String getChallengeId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>nw.challenge.challenge_class_id</code>.
     */
    public void setChallengeClassId(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>nw.challenge.challenge_class_id</code>.
     */
    public String getChallengeClassId() {
        return (String) get(7);
    }

    /**
     * Setter for <code>nw.challenge.challenge_status</code>.
     */
    public void setChallengeStatus(ChallengeStatus value) {
        set(8, value);
    }

    /**
     * Getter for <code>nw.challenge.challenge_status</code>.
     */
    public ChallengeStatus getChallengeStatus() {
        return (ChallengeStatus) get(8);
    }

    /**
     * Setter for <code>nw.challenge.challenge_resolution</code>.
     */
    public void setChallengeResolution(ChallengeResolution value) {
        set(9, value);
    }

    /**
     * Getter for <code>nw.challenge.challenge_resolution</code>.
     */
    public ChallengeResolution getChallengeResolution() {
        return (ChallengeResolution) get(9);
    }

    /**
     * Setter for <code>nw.challenge.challenge_valid_until</code>.
     */
    public void setChallengeValidUntil(LocalDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>nw.challenge.challenge_valid_until</code>.
     */
    public LocalDateTime getChallengeValidUntil() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for <code>nw.challenge.wtime</code>.
     */
    public void setWtime(LocalDateTime value) {
        set(11, value);
    }

    /**
     * Getter for <code>nw.challenge.wtime</code>.
     */
    public LocalDateTime getWtime() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>nw.challenge.current</code>.
     */
    public void setCurrent(Boolean value) {
        set(12, value);
    }

    /**
     * Getter for <code>nw.challenge.current</code>.
     */
    public Boolean getCurrent() {
        return (Boolean) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row13<Long, Long, LocalDateTime, LocalDateTime, Integer, String, String, String, ChallengeStatus, ChallengeResolution, LocalDateTime, LocalDateTime, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row13<Long, Long, LocalDateTime, LocalDateTime, Integer, String, String, String, ChallengeStatus, ChallengeResolution, LocalDateTime, LocalDateTime, Boolean> valuesRow() {
        return (Row13) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Challenge.CHALLENGE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return Challenge.CHALLENGE.EVENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field3() {
        return Challenge.CHALLENGE.EVENT_CREATED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field4() {
        return Challenge.CHALLENGE.EVENT_OCCURED_AT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return Challenge.CHALLENGE.SEQUENCE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Challenge.CHALLENGE.IDENTITY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return Challenge.CHALLENGE.CHALLENGE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return Challenge.CHALLENGE.CHALLENGE_CLASS_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ChallengeStatus> field9() {
        return Challenge.CHALLENGE.CHALLENGE_STATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ChallengeResolution> field10() {
        return Challenge.CHALLENGE.CHALLENGE_RESOLUTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field11() {
        return Challenge.CHALLENGE.CHALLENGE_VALID_UNTIL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field12() {
        return Challenge.CHALLENGE.WTIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field13() {
        return Challenge.CHALLENGE.CURRENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getEventId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value3() {
        return getEventCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value4() {
        return getEventOccuredAt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getSequenceId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getIdentityId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getChallengeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getChallengeClassId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeStatus value9() {
        return getChallengeStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeResolution value10() {
        return getChallengeResolution();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value11() {
        return getChallengeValidUntil();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value12() {
        return getWtime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value13() {
        return getCurrent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value2(Long value) {
        setEventId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value3(LocalDateTime value) {
        setEventCreatedAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value4(LocalDateTime value) {
        setEventOccuredAt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value5(Integer value) {
        setSequenceId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value6(String value) {
        setIdentityId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value7(String value) {
        setChallengeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value8(String value) {
        setChallengeClassId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value9(ChallengeStatus value) {
        setChallengeStatus(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value10(ChallengeResolution value) {
        setChallengeResolution(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value11(LocalDateTime value) {
        setChallengeValidUntil(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value12(LocalDateTime value) {
        setWtime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord value13(Boolean value) {
        setCurrent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChallengeRecord values(Long value1, Long value2, LocalDateTime value3, LocalDateTime value4, Integer value5, String value6, String value7, String value8, ChallengeStatus value9, ChallengeResolution value10, LocalDateTime value11, LocalDateTime value12, Boolean value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChallengeRecord
     */
    public ChallengeRecord() {
        super(Challenge.CHALLENGE);
    }

    /**
     * Create a detached, initialised ChallengeRecord
     */
    public ChallengeRecord(Long id, Long eventId, LocalDateTime eventCreatedAt, LocalDateTime eventOccuredAt, Integer sequenceId, String identityId, String challengeId, String challengeClassId, ChallengeStatus challengeStatus, ChallengeResolution challengeResolution, LocalDateTime challengeValidUntil, LocalDateTime wtime, Boolean current) {
        super(Challenge.CHALLENGE);

        set(0, id);
        set(1, eventId);
        set(2, eventCreatedAt);
        set(3, eventOccuredAt);
        set(4, sequenceId);
        set(5, identityId);
        set(6, challengeId);
        set(7, challengeClassId);
        set(8, challengeStatus);
        set(9, challengeResolution);
        set(10, challengeValidUntil);
        set(11, wtime);
        set(12, current);
    }
}
